{"version":3,"file":"static/js/226.12cd0682.chunk.js","mappings":"gMACA,GAAiB,E,kBCgCjB,EA7BoB,WAClB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAEA,EAAMC,KAAR,IAG7BC,GAASH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAEA,EAAME,MAAR,IAQhC,OACA,eAAIC,UAAWC,EAAAA,YAAf,SAPiB,WACf,IAAMC,EAAmBH,EAAOI,cAChC,OAAOR,EAASI,QAAO,SAAAK,GAAO,OAAIA,EAAQC,KAAKF,cAAcG,SAASJ,EAAxC,GAC/B,CAKEK,GAAWC,KAAI,gBAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,OAAb,OACd,gBAAIV,UAAWC,EAAAA,YAAf,WACE,cAAGD,UAAWC,EAAAA,YAAd,SAAgCI,KAChC,cAAGL,UAAWC,EAAAA,cAAd,SAAkCS,KAClC,mBAAQV,UAAWC,EAAAA,OACnBU,QAAS,kBAAMlB,GAASmB,EAAAA,EAAAA,qBAAoBH,GAAnC,EADT,sBAHmCA,EADvB,KAYnB,E,SC9BD,GAAiB,ECoEjB,EA/DiB,WACf,IAAMhB,GAAWC,EAAAA,EAAAA,OAEjBmB,EAAAA,EAAAA,YAAU,WACRpB,GAASqB,EAAAA,EAAAA,oBACV,GAAE,CAACrB,IAEJ,IAAME,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAEA,EAAMC,KAAR,IAE7BiB,EAAe,SAACC,GACpB,IAAMC,EAAYD,EAAEE,cAAcC,MAE9B,GAAGxB,EAASyB,MAAK,SAAAhB,GAAO,OAAGA,EAAQC,OAASY,CAApB,IACxB,OAAQI,MAAM,aAAD,OAAcJ,EAAd,oBAElB,EASG,OACE,kBAAMjB,UAAWC,EAAAA,UAAgBqB,SARhB,SAAAN,GACjBA,EAAEO,iBACJ,IAAMC,EAAOR,EAAEE,cACfzB,GAASgC,EAAAA,EAAAA,qBAAoB,CAAEpB,KAAKmB,EAAKE,SAASrB,KAAKc,MAAOT,OAAOc,EAAKE,SAAShB,OAAOS,SAC1FK,EAAKG,OACR,EAGK,WACE,4BACE,kBAAO3B,UAAWC,EAAAA,YAAiB2B,QAAQ,OAA3C,mBAGA,kBACE5B,UAAWC,EAAAA,UACXI,KAAK,OACLwB,KAAK,OACLC,MAAM,yIACNC,QAAQ,yHACRC,UAAQ,EACRC,SAAUlB,QAId,4BACE,kBAAOf,UAAWC,EAAAA,YAAiB2B,QAAQ,SAA3C,qBAGA,kBACE5B,UAAWC,EAAAA,UACX4B,KAAK,MACLxB,KAAK,SACL0B,QAAQ,yFACRD,MAAM,+FACNE,UAAQ,EACRC,SAAUlB,QAId,mBAAQf,UAAWC,EAAAA,IAAS4B,KAAK,SAAjC,2BAMT,ECnED,GAAiB,E,SC4BjB,EAvBe,WACX,IAAMpC,GAAWC,EAAAA,EAAAA,MAOjB,OACI,mBAAOkC,QAAQ,OAAf,mCACA,kBAAOvB,KAAK,OAAOwB,KAAK,OACxBI,SAPiB,SAAAjB,GACjBvB,GAASyC,EAAAA,EAAAA,IAAUlB,EAAEmB,OAAOhB,OAC/B,EAOGnB,UAAWC,EAAAA,MAGH+B,UAAQ,MAIvB,ECtBc,SAASI,IACpB,OACI,iCACA,uCACA,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGP,C","sources":["components/ContactList/ContactList.module.css","components/ContactList/ContactList.jsx","components/Contacts/Contacts.module.css","components/Contacts/Contacts.jsx","components/Filter/Filter.module.css","components/Filter/Filter.jsx","page/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch, useSelector } from 'react-redux';\nimport css from 'components/ContactList/ContactList.module.css';\nimport { deleteContactsThunk } from 'redux/contacts/thunk';\n\nconst ContactList = () => {\n  const dispatch = useDispatch()\n  const contacts  = useSelector(state=>state.items)\n  // console.log(contacts)\n\n  const filter = useSelector(state=>state.filter)\n//  console.log(filter, 'filter')\n  const contactS = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n  \n\n  return (\n  <ul className={css.contactItem}>\n    {contactS().map(({ id, name, number }) => (\n      <li className={css.contactList} key={id}>\n        <p className={css.contactName}>{name}</p>\n        <p className={css.contactNumber}>{number}</p>\n        <button className={css.button} \n        onClick={() => dispatch(deleteContactsThunk(id))}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n  )\n}\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport css from 'components/Contacts/Contacts.module.css';\nimport { createContactsThunk, getContactsThunk } from 'redux/contacts/thunk';\n\n\nconst Contacts = ()=> {\n  const dispatch = useDispatch()\n    \n  useEffect(() => {\n    dispatch(getContactsThunk())\n  }, [dispatch])\n\n  const contacts  = useSelector(state=>state.items)\n  \n  const handleChange = (e) =>{\n    const valueName = e.currentTarget.value\n\n        if(contacts.find(contact=> contact.name === valueName)){\n        return  alert(`This name ${valueName} already exists!`); \n        } \n  } \n\n    const handleSubmit = e => {\n        e.preventDefault(); \n      const form = e.currentTarget \n      dispatch(createContactsThunk({ name:form.elements.name.value, number:form.elements.number.value }))\n      form.reset()\n  }\n\n      return (     \n        <form className={css.container}  onSubmit={handleSubmit}>\n          <div>\n            <label className={css.contactName} htmlFor=\"name\">\n              Name\n            </label>\n            <input\n              className={css.formInput}\n              name=\"name\"\n              type=\"text\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              required\n              onChange={handleChange}\n              // value={contacts.name}\n            />\n          </div>\n          <div>\n            <label className={css.contactName} htmlFor=\"number\">\n              Number\n            </label>\n            <input\n              className={css.formInput}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              onChange={handleChange}\n              // value={contacts.number}\n            />\n          </div>\n          <button className={css.btn} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      )\n\n}\nexport default Contacts","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport css from '../Filter/Filter.module.css'\nimport { setFilter } from \"redux/contacts/slice\";\n\n\nconst Filter = () =>{\n    const dispatch = useDispatch()\n    // const filter = useSelector(state=>state.filter)\n\n    const changeFilter = e =>{\n        dispatch(setFilter(e.target.value))\n    };\n    \n    return(\n        <label htmlFor=\"name\">Find contacts by name\n        <input name=\"name\" type=\"text\"\n        onChange={changeFilter} \n        // value={filter}\n        className={css.input}                \n                // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                required\n        />\n    </label>\n    )\n}\n\n\nexport default Filter;","import ContactList from \"components/ContactList/ContactList\";\nimport Contacts from \"components/Contacts/Contacts\";\nimport Filter from \"components/Filter/Filter\";\n\nexport default function ContactsPage(){\n    return(\n        <>\n        <h1>Phonebook</h1>\n        <Contacts />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        </>\n    )\n}"],"names":["dispatch","useDispatch","contacts","useSelector","state","items","filter","className","css","normalizedFilter","toLowerCase","contact","name","includes","contactS","map","id","number","onClick","deleteContactsThunk","useEffect","getContactsThunk","handleChange","e","valueName","currentTarget","value","find","alert","onSubmit","preventDefault","form","createContactsThunk","elements","reset","htmlFor","type","title","pattern","required","onChange","setFilter","target","ContactsPage"],"sourceRoot":""}